# Generated by Django 5.2.7 on 2025-10-28 18:54

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('identity', '0008_add_social_media_accounts'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of the contact person', max_length=255)),
                ('role', models.CharField(blank=True, choices=[('marketing', 'Marketing / Growth'), ('pr', 'PR / Publicist / Press'), ('playlist_curator', 'Playlist curator / DSP editor'), ('radio', 'Radio DJ / Programmer'), ('a&r', 'A&R'), ('manager', 'Artist manager'), ('booking_agent', 'Booking agent / Agent'), ('venue', 'Venue / Booker'), ('promoter', 'Promoter / Event promoter'), ('distributor', 'Distributor / DSP aggregator'), ('publisher', 'Publisher / Sync rights'), ('sync_supervisor', 'Sync / Music supervisor (film/TV/ads)'), ('producer', 'Producer / Beatmaker'), ('songwriter', 'Songwriter / Composer / Lyricist'), ('engineer', 'Recording / Mixing / Mastering engineer'), ('photographer', 'Photographer / Videographer'), ('designer', 'Graphic / Artwork designer'), ('brand', 'Brand / Sponsor / Partnership rep'), ('influencer', 'Influencer / Creator / KOL'), ('retailer', 'Retail / Merch / Store contact'), ('legal', 'Lawyer / Contracts / Rights'), ('finance', 'Accountant / Finance / Royalty admin'), ('operations', 'Ops / Logistics / Warehouse / Supplier'), ('admin', 'Admin / Coordinator / Personal assistant'), ('fan', 'Fan / Superfan (direct-to-fan ops)'), ('other', 'Other / Misc')], help_text='Business role of the contact person', max_length=50, null=True)),
                ('engagement_stage', models.CharField(blank=True, choices=[('lead', 'Lead (new, unqualified)'), ('prospect', 'Prospect (in talks / negotiating)'), ('active', 'Active (current project / engagement)'), ('partner', 'Partner (formal long-term partner)'), ('dormant', 'Dormant (no recent activity)'), ('lost', 'Lost (opportunity lost)'), ('blacklisted', 'Blacklisted / Do not contact')], help_text='Current engagement stage in relationship', max_length=50, null=True)),
                ('sentiment', models.CharField(blank=True, choices=[('advocate', 'Advocate / Champion (promotes you)'), ('supportive', 'Supportive / Helpful'), ('approachable', 'Approachable (easy to reach)'), ('friendly', 'Friendly / Warm'), ('professional', 'Professional / Neutral-positive'), ('neutral', 'Neutral / No strong feeling'), ('reserved', 'Reserved / Polite but distant'), ('distant', 'Distant / Low engagement'), ('awkward', 'Awkward / Tricky rapport'), ('friction', 'Friction / Frequent disagreements'), ('hostile', 'Hostile / Negative'), ('blocked', 'Blocked / Legal / Do not contact')], help_text='Relationship sentiment / attitude', max_length=50, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this contact')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_persons', to='identity.entity')),
            ],
            options={
                'verbose_name': 'Contact Person',
                'verbose_name_plural': 'Contact Persons',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ContactEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Email address', max_length=254)),
                ('label', models.CharField(blank=True, help_text="Label for this email (e.g., 'work', 'personal')", max_length=50)),
                ('is_primary', models.BooleanField(default=False, help_text='Is this the primary email?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contact_person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emails', to='identity.contactperson')),
            ],
            options={
                'verbose_name': 'Contact Email',
                'verbose_name_plural': 'Contact Emails',
                'ordering': ['-is_primary', 'email'],
            },
        ),
        migrations.CreateModel(
            name='ContactPhone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(help_text='Phone number', max_length=50)),
                ('label', models.CharField(blank=True, help_text="Label for this phone (e.g., 'mobile', 'office', 'direct')", max_length=50)),
                ('is_primary', models.BooleanField(default=False, help_text='Is this the primary phone?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contact_person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phones', to='identity.contactperson')),
            ],
            options={
                'verbose_name': 'Contact Phone',
                'verbose_name_plural': 'Contact Phones',
                'ordering': ['-is_primary', 'phone'],
            },
        ),
        migrations.AddIndex(
            model_name='contactperson',
            index=models.Index(fields=['entity', 'name'], name='identity_co_entity__66b5b4_idx'),
        ),
        migrations.AddIndex(
            model_name='contactperson',
            index=models.Index(fields=['role'], name='identity_co_role_60a0a3_idx'),
        ),
        migrations.AddIndex(
            model_name='contactperson',
            index=models.Index(fields=['engagement_stage'], name='identity_co_engagem_e3eb0e_idx'),
        ),
        migrations.AddIndex(
            model_name='contactemail',
            index=models.Index(fields=['contact_person', 'is_primary'], name='identity_co_contact_a10c63_idx'),
        ),
        migrations.AddIndex(
            model_name='contactemail',
            index=models.Index(fields=['email'], name='identity_co_email_8958a9_idx'),
        ),
        migrations.AddIndex(
            model_name='contactphone',
            index=models.Index(fields=['contact_person', 'is_primary'], name='identity_co_contact_8bce68_idx'),
        ),
    ]
