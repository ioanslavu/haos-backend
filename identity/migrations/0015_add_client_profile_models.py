# Generated by Django 5.2.7 on 2025-10-31 03:06

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0010_add_client_profile_models'),
        ('identity', '0014_entity_profile_photo'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ClientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('health_score', models.IntegerField(blank=True, db_index=True, help_text='Overall client health score (1-10). Can be manually set or auto-calculated.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('collaboration_frequency_score', models.IntegerField(blank=True, help_text='Score based on how often we work with this client (1-10)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('feedback_score', models.IntegerField(blank=True, help_text='Score based on client feedback quality and responsiveness (1-10)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('payment_latency_score', models.IntegerField(blank=True, help_text='Score based on payment timeliness (1-10, 10=always on time)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True, help_text="Notes about this client's health score and reliability")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(help_text='The department this profile belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='client_profiles', to='api.department')),
                ('entity', models.ForeignKey(help_text='The client entity this profile belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='client_profiles', to='identity.entity')),
                ('updated_by', models.ForeignKey(help_text='Last user who updated this profile', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='client_profiles_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Client Profile',
                'verbose_name_plural': 'Client Profiles',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ClientProfileHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('health_score', models.IntegerField(blank=True, help_text='Health score at this point in time', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('collaboration_frequency_score', models.IntegerField(blank=True, help_text='Collaboration frequency score at this point in time', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('feedback_score', models.IntegerField(blank=True, help_text='Feedback score at this point in time', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('payment_latency_score', models.IntegerField(blank=True, help_text='Payment latency score at this point in time', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True, help_text='Notes at this point in time')),
                ('change_reason', models.TextField(blank=True, help_text='Optional reason for this change')),
                ('changed_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('changed_by', models.ForeignKey(help_text='User who made this change', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='client_profile_changes', to=settings.AUTH_USER_MODEL)),
                ('client_profile', models.ForeignKey(help_text='The client profile this history entry belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='history', to='identity.clientprofile')),
            ],
            options={
                'verbose_name': 'Client Profile History',
                'verbose_name_plural': 'Client Profile Histories',
                'ordering': ['-changed_at'],
            },
        ),
        migrations.AddIndex(
            model_name='clientprofile',
            index=models.Index(fields=['entity', 'department'], name='identity_cl_entity__327cf4_idx'),
        ),
        migrations.AddIndex(
            model_name='clientprofile',
            index=models.Index(fields=['department', 'health_score'], name='identity_cl_departm_266b91_idx'),
        ),
        migrations.AddIndex(
            model_name='clientprofile',
            index=models.Index(fields=['health_score'], name='identity_cl_health__3a894b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='clientprofile',
            unique_together={('entity', 'department')},
        ),
        migrations.AddIndex(
            model_name='clientprofilehistory',
            index=models.Index(fields=['client_profile', '-changed_at'], name='identity_cl_client__a76240_idx'),
        ),
        migrations.AddIndex(
            model_name='clientprofilehistory',
            index=models.Index(fields=['changed_by', '-changed_at'], name='identity_cl_changed_118ffa_idx'),
        ),
    ]
