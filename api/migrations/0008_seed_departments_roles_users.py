# Generated by Django 5.2.7 on 2025-10-30 15:50

from django.db import migrations
from django.contrib.auth.hashers import make_password


def seed_departments_roles_and_migrate_data(apps, schema_editor):
    """
    1. Seed initial departments and roles
    2. Migrate existing user data from old string fields to new FK fields
    3. Create test users
    """
    Department = apps.get_model('api', 'Department')
    Role = apps.get_model('api', 'Role')
    User = apps.get_model('auth', 'User')
    UserProfile = apps.get_model('api', 'UserProfile')

    # ===== CREATE DEPARTMENTS =====
    print("Creating departments...")
    digital, _ = Department.objects.get_or_create(
        code='digital',
        defaults={
            'name': 'Digital Department',
            'description': 'Digital operations, artist management, and digital distribution',
            'is_active': True,
        }
    )

    sales, _ = Department.objects.get_or_create(
        code='sales',
        defaults={
            'name': 'Sales Department',
            'description': 'Sales operations, brand deals, and client relationships',
            'is_active': True,
        }
    )

    legal, _ = Department.objects.get_or_create(
        code='legal',
        defaults={
            'name': 'Legal Department',
            'description': 'Legal operations and sensitive data access',
            'is_active': True,
        }
    )

    publishing, _ = Department.objects.get_or_create(
        code='publishing',
        defaults={
            'name': 'Publishing/Production Department',
            'description': 'Publishing operations, song agreements, and production',
            'is_active': True,
        }
    )

    print(f"Created departments: {digital.name}, {sales.name}, {legal.name}, {publishing.name}")

    # ===== CREATE ROLES =====
    print("Creating roles...")

    # Guest role (level 100)
    guest, _ = Role.objects.get_or_create(
        code='guest',
        defaults={
            'name': 'Guest',
            'description': 'Guest user with no access',
            'level': 100,
            'department': None,
            'is_system_role': True,
            'is_active': True,
        }
    )

    # Digital roles
    digital_employee, _ = Role.objects.get_or_create(
        code='digital_employee',
        defaults={
            'name': 'Digital Employee',
            'description': 'Digital department employee with basic access to own records',
            'level': 200,
            'department': digital,
            'is_system_role': True,
            'is_active': True,
        }
    )

    digital_manager, _ = Role.objects.get_or_create(
        code='digital_manager',
        defaults={
            'name': 'Digital Manager',
            'description': 'Digital department manager with full access to department records',
            'level': 300,
            'department': digital,
            'is_system_role': True,
            'is_active': True,
        }
    )

    # Sales roles
    sales_employee, _ = Role.objects.get_or_create(
        code='sales_employee',
        defaults={
            'name': 'Sales Employee',
            'description': 'Sales department employee with basic access to own records',
            'level': 200,
            'department': sales,
            'is_system_role': True,
            'is_active': True,
        }
    )

    sales_manager, _ = Role.objects.get_or_create(
        code='sales_manager',
        defaults={
            'name': 'Sales Manager',
            'description': 'Sales department manager with full access to department records',
            'level': 300,
            'department': sales,
            'is_system_role': True,
            'is_active': True,
        }
    )

    # Publishing roles
    publishing_employee, _ = Role.objects.get_or_create(
        code='publishing_employee',
        defaults={
            'name': 'Publishing Employee',
            'description': 'Publishing department employee with basic access to own records',
            'level': 200,
            'department': publishing,
            'is_system_role': True,
            'is_active': True,
        }
    )

    publishing_manager, _ = Role.objects.get_or_create(
        code='publishing_manager',
        defaults={
            'name': 'Publishing Manager',
            'description': 'Publishing department manager with full access to department records',
            'level': 300,
            'department': publishing,
            'is_system_role': True,
            'is_active': True,
        }
    )

    # Administrator role (level 1000)
    administrator, _ = Role.objects.get_or_create(
        code='administrator',
        defaults={
            'name': 'Administrator',
            'description': 'System administrator with full access across all departments',
            'level': 1000,
            'department': None,
            'is_system_role': True,
            'is_active': True,
        }
    )

    print("Created roles: guest, digital_employee, digital_manager, sales_employee, sales_manager, publishing_employee, publishing_manager, administrator")

    # ===== MIGRATE EXISTING USER DATA =====
    print("\nMigrating existing user data from old string fields to new FK fields...")

    # Map old string values to new Role objects
    role_mapping = {
        'guest': guest,
        'administrator': administrator,
        'digital_employee': digital_employee,
        'digital_manager': digital_manager,
        'sales_employee': sales_employee,
        'sales_manager': sales_manager,
        'publishing_employee': publishing_employee,
        'publishing_manager': publishing_manager,
    }

    # Map old department strings to new Department objects
    department_mapping = {
        'digital': digital,
        'sales': sales,
        'legal': legal,
        'publishing': publishing,
    }

    # Migrate all existing UserProfiles
    profiles_updated = 0
    for profile in UserProfile.objects.all():
        updated = False

        # Migrate role from old string field
        if hasattr(profile, 'role_old') and profile.role_old:
            old_role_str = profile.role_old
            if old_role_str in role_mapping:
                profile.role = role_mapping[old_role_str]
                updated = True
                print(f"  Migrated user {profile.user.email}: role '{old_role_str}' -> {profile.role.name}")
            else:
                # Default to guest if unknown role
                profile.role = guest
                updated = True
                print(f"  WARNING: Unknown role '{old_role_str}' for {profile.user.email}, defaulting to guest")
        elif not profile.role:
            # No old role data, default to guest
            profile.role = guest
            updated = True
            print(f"  Set default guest role for {profile.user.email}")

        # Migrate department from old string field
        if hasattr(profile, 'department_old') and profile.department_old:
            old_dept_str = profile.department_old
            if old_dept_str in department_mapping:
                profile.department = department_mapping[old_dept_str]
                updated = True
                print(f"  Migrated user {profile.user.email}: department '{old_dept_str}' -> {profile.department.name}")
            else:
                print(f"  WARNING: Unknown department '{old_dept_str}' for {profile.user.email}, leaving as None")

        if updated:
            profile.save()
            profiles_updated += 1

    print(f"\nMigrated {profiles_updated} existing user profiles")

    # ===== CREATE TEST USERS FOR IMPERSONATION =====
    print("\nCreating test users for impersonation...")
    print("NOTE: These users are for the 'Test as Roles' impersonation feature in the UI.")
    print("      They allow testing role/department permissions without separate accounts.")

    # Define test users data
    test_users = [
        {
            'email': 'test.guest@hahahaproduction.com',
            'username': 'test.guest@hahahaproduction.com',
            'first_name': 'Test Guest',
            'last_name': 'User',
            'password': 'test123',
            'role': guest,
            'department': None,
        },
        {
            'email': 'test.digital.manager@hahahaproduction.com',
            'username': 'test.digital.manager@hahahaproduction.com',
            'first_name': 'Test Digital',
            'last_name': 'Manager',
            'password': 'test123',
            'role': digital_manager,
            'department': digital,
        },
        {
            'email': 'test.digital.employee@hahahaproduction.com',
            'username': 'test.digital.employee@hahahaproduction.com',
            'first_name': 'Test Digital',
            'last_name': 'Employee',
            'password': 'test123',
            'role': digital_employee,
            'department': digital,
        },
        {
            'email': 'test.sales.manager@hahahaproduction.com',
            'username': 'test.sales.manager@hahahaproduction.com',
            'first_name': 'Test Sales',
            'last_name': 'Manager',
            'password': 'test123',
            'role': sales_manager,
            'department': sales,
        },
        {
            'email': 'test.sales.employee@hahahaproduction.com',
            'username': 'test.sales.employee@hahahaproduction.com',
            'first_name': 'Test Sales',
            'last_name': 'Employee',
            'password': 'test123',
            'role': sales_employee,
            'department': sales,
        },
        {
            'email': 'test.publishing.manager@hahahaproduction.com',
            'username': 'test.publishing.manager@hahahaproduction.com',
            'first_name': 'Test Publishing',
            'last_name': 'Manager',
            'password': 'test123',
            'role': publishing_manager,
            'department': publishing,
        },
        {
            'email': 'test.publishing.employee@hahahaproduction.com',
            'username': 'test.publishing.employee@hahahaproduction.com',
            'first_name': 'Test Publishing',
            'last_name': 'Employee',
            'password': 'test123',
            'role': publishing_employee,
            'department': publishing,
        },
    ]

    # Create test users
    for user_data in test_users:
        role = user_data.pop('role')
        dept = user_data.pop('department')
        password = user_data.pop('password')

        user, created = User.objects.get_or_create(
            email=user_data['email'],
            defaults={
                **user_data,
                'password': make_password(password),
                'is_active': True,
            }
        )
        if created:
            print(f"  Created {role.name}: {user.email}")

        UserProfile.objects.get_or_create(
            user=user,
            defaults={'role': role, 'department': dept, 'setup_completed': True}
        )

    print("\n=== SEED AND MIGRATION COMPLETED ===")
    print("Test users created with following credentials (password: test123 for all):")
    print("  test.digital.manager@hahahaproduction.com (Digital Manager)")
    print("  test.digital.employee@hahahaproduction.com (Digital Employee)")
    print("  test.sales.manager@hahahaproduction.com (Sales Manager)")
    print("  test.sales.employee@hahahaproduction.com (Sales Employee)")
    print("  test.publishing.manager@hahahaproduction.com (Publishing Manager)")
    print("  test.publishing.employee@hahahaproduction.com (Publishing Employee)")
    print("  test.guest@hahahaproduction.com (Guest)")
    print("\nNOTE: No test admin user - administrators cannot be impersonated.")
    print("========================================\n")


def reverse_seed(apps, schema_editor):
    """
    Reverse the seed operation.
    """
    Department = apps.get_model('api', 'Department')
    Role = apps.get_model('api', 'Role')
    User = apps.get_model('auth', 'User')

    # Delete test users
    test_emails = [
        'test.guest@hahahaproduction.com',
        'test.digital.manager@hahahaproduction.com',
        'test.digital.employee@hahahaproduction.com',
        'test.sales.manager@hahahaproduction.com',
        'test.sales.employee@hahahaproduction.com',
        'test.publishing.manager@hahahaproduction.com',
        'test.publishing.employee@hahahaproduction.com',
    ]
    User.objects.filter(email__in=test_emails).delete()

    # Delete roles and departments
    Role.objects.all().delete()
    Department.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0007_department_role_and_more'),
    ]

    operations = [
        migrations.RunPython(seed_departments_roles_and_migrate_data, reverse_seed),
    ]
