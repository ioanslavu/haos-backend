# Generated by Django 5.2.7 on 2025-10-23 13:03

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('catalog', '0001_initial'),
        ('contracts', '0003_contract_celery_task_id_contract_error_message_and_more'),
        ('identity', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='contract',
            name='advance',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Advance amount', max_digits=12),
        ),
        migrations.AddField(
            model_name='contract',
            name='contract_type',
            field=models.CharField(blank=True, choices=[('artist_master', 'Artist Master Agreement'), ('producer_service', 'Producer Service Agreement'), ('publishing_writer', 'Publishing Writer Agreement'), ('publishing_admin', 'Publishing Administration'), ('co_pub', 'Co-Publishing Agreement'), ('license_sync', 'Synchronization License'), ('co_label', 'Co-Label Agreement'), ('video_production', 'Video Production Agreement'), ('digital_dist', 'Digital Distribution Agreement')], help_text='Type of contract', max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='contract',
            name='counterparty_entity',
            field=models.ForeignKey(blank=True, help_text='The other party (artist, producer, etc.)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='contracts_as_counterparty', to='identity.entity'),
        ),
        migrations.AddField(
            model_name='contract',
            name='label_entity',
            field=models.ForeignKey(blank=True, help_text='Your label/company entity', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='contracts_as_label', to='identity.entity'),
        ),
        migrations.AddField(
            model_name='contract',
            name='recoupable',
            field=models.BooleanField(default=True, help_text='Is the advance recoupable?'),
        ),
        migrations.AddField(
            model_name='contract',
            name='term_end',
            field=models.DateField(blank=True, help_text='Contract end date', null=True),
        ),
        migrations.AddField(
            model_name='contract',
            name='term_start',
            field=models.DateField(blank=True, help_text='Contract start date', null=True),
        ),
        migrations.AddField(
            model_name='contract',
            name='territory',
            field=models.CharField(blank=True, default='World', help_text='Territory coverage', max_length=100),
        ),
        migrations.CreateModel(
            name='ContractRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('right_type', models.CharField(choices=[('master', 'Master Rights'), ('publ', 'Publishing Rights'), ('sync', 'Synchronization Rights'), ('merch', 'Merchandise Rights')], help_text='Type of right', max_length=10)),
                ('channel', models.CharField(choices=[('stream', 'Streaming'), ('download', 'Digital Download'), ('physical', 'Physical Sales'), ('sync', 'Synchronization'), ('ugc', 'User Generated Content'), ('shorts', 'Shorts/Reels'), ('broadcast', 'Broadcast'), ('public_perf', 'Public Performance')], help_text='Distribution channel', max_length=20)),
                ('percent', models.DecimalField(decimal_places=2, help_text='Royalty percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('base', models.CharField(choices=[('gross', 'Gross Revenue'), ('net', 'Net Revenue'), ('wholesale', 'Wholesale Price'), ('retail', 'Retail Price')], default='net', help_text='What the percentage is based on', max_length=10)),
                ('minimum_rate', models.DecimalField(blank=True, decimal_places=4, help_text='Minimum rate per unit (e.g., per stream)', max_digits=10, null=True)),
                ('producer_points_default', models.DecimalField(blank=True, decimal_places=2, help_text='Default producer points for recordings under this contract', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('escalation_clause', models.TextField(blank=True, help_text='Rate escalation terms (e.g., increases after X units sold)', null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rates', to='contracts.contract')),
            ],
            options={
                'ordering': ['right_type', 'channel'],
                'indexes': [models.Index(fields=['contract', 'right_type', 'channel'], name='contracts_c_contrac_78519b_idx')],
                'unique_together': {('contract', 'right_type', 'channel')},
            },
        ),
        migrations.CreateModel(
            name='ContractScope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('all_in_term', models.BooleanField(default=False, help_text='Include all works/recordings created during contract term')),
                ('include_derivatives', models.BooleanField(default=True, help_text='Include remixes, covers, and other derivatives')),
                ('notes', models.TextField(blank=True, help_text='Notes about this scope item', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scopes', to='contracts.contract')),
                ('recording', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contract_scopes', to='catalog.recording')),
                ('release', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contract_scopes', to='catalog.release')),
                ('work', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contract_scopes', to='catalog.work')),
            ],
            options={
                'indexes': [models.Index(fields=['contract'], name='contracts_c_contrac_fc4e6e_idx'), models.Index(fields=['work'], name='contracts_c_work_id_8808b5_idx'), models.Index(fields=['recording'], name='contracts_c_recordi_7b00e9_idx'), models.Index(fields=['release'], name='contracts_c_release_09a4c8_idx')],
            },
        ),
    ]
