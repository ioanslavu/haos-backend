# Generated by Django 5.2.7 on 2025-10-24 02:03

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('contracts', '0004_contract_advance_contract_contract_type_and_more'),
        ('identity', '0003_entity_bank_branch_entity_bank_name_entity_iban_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContractTerms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_duration_years', models.IntegerField(help_text='Contract duration in years', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('notice_period_days', models.IntegerField(help_text='Notice period in days before contract end', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(365)])),
                ('auto_renewal', models.BooleanField(default=False, help_text='Whether contract auto-renews')),
                ('auto_renewal_years', models.IntegerField(blank=True, help_text='Auto-renewal period in years', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('minimum_launches_per_year', models.IntegerField(help_text='Minimum song launches per year', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('max_investment_per_song', models.DecimalField(decimal_places=2, help_text='Maximum investment per song in EUR', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('max_investment_per_year', models.DecimalField(decimal_places=2, help_text='Maximum total investment per year in EUR', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('penalty_amount', models.DecimalField(decimal_places=2, default=Decimal('50000.00'), help_text='Penalty amount for contract breach in EUR', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('currency', models.CharField(default='EUR', help_text='Currency for all financial terms', max_length=3)),
                ('start_date', models.DateField(help_text='Contract start date')),
                ('special_terms', models.TextField(blank=True, help_text='Any special terms or conditions')),
                ('draft_data', models.JSONField(blank=True, default=dict, help_text='Auto-saved form data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contract', models.OneToOneField(blank=True, help_text='Associated contract (null for draft/preview)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='terms', to='contracts.contract')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_contract_terms', to=settings.AUTH_USER_MODEL)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contract_terms', to='identity.entity')),
            ],
            options={
                'verbose_name': 'Contract Terms',
                'verbose_name_plural': 'Contract Terms',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommissionSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(help_text='Contract year (1-based)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('concert_commission', models.DecimalField(decimal_places=2, help_text='Concert commission percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('rights_percentage', models.DecimalField(decimal_places=2, help_text='Connected rights percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('merchandising_percentage', models.DecimalField(decimal_places=2, help_text='Merchandising percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('image_rights_percentage', models.DecimalField(decimal_places=2, help_text='Image rights percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('ppd_percentage', models.DecimalField(decimal_places=2, help_text='Physical units (PPD) percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('emd_percentage', models.DecimalField(decimal_places=2, help_text='Digital (EMD) revenue percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('sync_percentage', models.DecimalField(decimal_places=2, help_text='Synchronization percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contract_terms', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commission_schedules', to='contracts.contractterms')),
            ],
            options={
                'ordering': ['contract_terms', 'year'],
                'unique_together': {('contract_terms', 'year')},
            },
        ),
    ]
