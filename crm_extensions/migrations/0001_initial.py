# Generated by Django 5.2.7 on 2025-10-30 19:47

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('api', '0008_seed_departments_roles_users'),
        ('campaigns', '0009_campaign_budget_allocated_campaign_budget_spent_and_more'),
        ('contracts', '0011_alter_contract_department_and_more'),
        ('identity', '0012_alter_sensitiveidentity_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Task title/description', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed task description and requirements')),
                ('task_type', models.CharField(choices=[('general', 'General Task'), ('follow_up', 'Follow-up'), ('review', 'Review'), ('approval', 'Approval Required'), ('campaign_setup', 'Campaign Setup'), ('content_creation', 'Content Creation'), ('performance_review', 'Performance Review'), ('report_delivery', 'Report Delivery'), ('ad_optimization', 'Ad Optimization'), ('platform_setup', 'Platform Setup'), ('proposal', 'Proposal Creation'), ('negotiation', 'Negotiation'), ('contract_prep', 'Contract Preparation'), ('closing', 'Deal Closing'), ('recording', 'Recording Session'), ('mixing', 'Mixing/Mastering'), ('video_production', 'Video Production'), ('artwork', 'Artwork Design'), ('registration', 'Work Registration'), ('royalty_collection', 'Royalty Collection'), ('statement_review', 'Statement Review')], db_index=True, default='general', help_text='Type of task for categorization and workflows', max_length=50)),
                ('status', models.CharField(choices=[('todo', 'To Do'), ('in_progress', 'In Progress'), ('blocked', 'Blocked'), ('review', 'In Review'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='todo', help_text='Current status of the task', max_length=20)),
                ('priority', models.IntegerField(choices=[(1, 'Low'), (2, 'Normal'), (3, 'High'), (4, 'Urgent')], db_index=True, default=2, help_text='Task priority level')),
                ('due_date', models.DateTimeField(blank=True, db_index=True, help_text='Task deadline', null=True)),
                ('reminder_date', models.DateTimeField(blank=True, help_text='When to send a reminder for this task', null=True)),
                ('started_at', models.DateTimeField(blank=True, help_text='When work on this task began', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When this task was completed', null=True)),
                ('estimated_hours', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated hours to complete this task', max_digits=5, null=True)),
                ('actual_hours', models.DecimalField(blank=True, decimal_places=2, help_text='Actual hours spent on this task', max_digits=5, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Department or task-specific metadata')),
                ('notes', models.TextField(blank=True, help_text='Additional notes or comments')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, help_text='User assigned to this task', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('blocks_tasks', models.ManyToManyField(blank=True, help_text='Tasks that this task blocks', related_name='blocked_by', to='crm_extensions.task')),
                ('campaign', models.ForeignKey(blank=True, help_text='Campaign this task is associated with', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='campaigns.campaign')),
                ('contract', models.ForeignKey(blank=True, help_text='Contract this task is associated with', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='contracts.contract')),
                ('created_by', models.ForeignKey(help_text='User who created this task', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tasks', to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(blank=True, help_text='Department this task belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='api.department')),
                ('entity', models.ForeignKey(blank=True, help_text='Entity (client/artist/brand) this task is associated with', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='identity.entity')),
                ('parent_task', models.ForeignKey(blank=True, help_text='Parent task if this is a subtask', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subtasks', to='crm_extensions.task')),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
                'ordering': ['-priority', 'due_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('email', 'Email'), ('call', 'Phone Call'), ('meeting', 'Meeting'), ('video_call', 'Video Call'), ('note', 'Internal Note'), ('follow_up', 'Follow-up'), ('task_created', 'Task Created'), ('status_change', 'Status Change'), ('document', 'Document Shared'), ('social_media', 'Social Media Interaction'), ('event', 'Event/Show'), ('negotiation', 'Negotiation')], db_index=True, help_text='Type of activity or communication', max_length=30)),
                ('subject', models.CharField(help_text='Subject or title of the activity', max_length=200)),
                ('content', models.TextField(blank=True, help_text='Detailed content or notes from the activity')),
                ('external_participants', models.JSONField(blank=True, default=list, help_text='List of external participants (names and emails)')),
                ('direction', models.CharField(choices=[('inbound', 'Inbound'), ('outbound', 'Outbound'), ('internal', 'Internal')], default='internal', help_text='Direction of communication', max_length=10)),
                ('sentiment', models.CharField(blank=True, choices=[('very_positive', 'Very Positive'), ('positive', 'Positive'), ('neutral', 'Neutral'), ('negative', 'Negative'), ('very_negative', 'Very Negative')], help_text='Sentiment or tone of the interaction', max_length=20, null=True)),
                ('activity_date', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='When this activity occurred')),
                ('duration_minutes', models.IntegerField(blank=True, help_text='Duration of the activity in minutes', null=True)),
                ('location', models.CharField(blank=True, help_text='Location where the activity took place', max_length=200)),
                ('follow_up_required', models.BooleanField(default=False, help_text='Whether this activity requires a follow-up')),
                ('follow_up_date', models.DateTimeField(blank=True, db_index=True, help_text='When to follow up on this activity', null=True)),
                ('follow_up_completed', models.BooleanField(default=False, help_text='Whether the follow-up has been completed')),
                ('attachments', models.JSONField(blank=True, default=list, help_text='List of attachment URLs or file references')),
                ('related_url', models.URLField(blank=True, help_text='Related URL (e.g., calendar link, document link)')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional activity-specific metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('campaign', models.ForeignKey(blank=True, help_text='Campaign this activity is related to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='campaigns.campaign')),
                ('contact_person', models.ForeignKey(blank=True, help_text='Specific contact person involved', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities', to='identity.contactperson')),
                ('contract', models.ForeignKey(blank=True, help_text='Contract this activity is related to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='contracts.contract')),
                ('created_by', models.ForeignKey(help_text='User who logged this activity', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities_created', to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(blank=True, help_text='Department this activity belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities', to='api.department')),
                ('entity', models.ForeignKey(blank=True, help_text='Entity this activity is related to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='identity.entity')),
                ('participants', models.ManyToManyField(blank=True, help_text='Internal users who participated in this activity', related_name='activities_participated', to=settings.AUTH_USER_MODEL)),
                ('follow_up_task', models.ForeignKey(blank=True, help_text='Task created for follow-up', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activity_follow_ups', to='crm_extensions.task')),
            ],
            options={
                'verbose_name': 'Activity',
                'verbose_name_plural': 'Activities',
                'ordering': ['-activity_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CampaignMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recorded_date', models.DateField(db_index=True, help_text='Date when these metrics were recorded')),
                ('impressions', models.IntegerField(blank=True, null=True)),
                ('clicks', models.IntegerField(blank=True, null=True)),
                ('ctr', models.DecimalField(blank=True, decimal_places=2, help_text='Click-through rate %', max_digits=5, null=True)),
                ('conversions', models.IntegerField(blank=True, null=True)),
                ('conversion_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Conversion rate %', max_digits=5, null=True)),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('cpc', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per click', max_digits=8, null=True)),
                ('cpa', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per acquisition', max_digits=8, null=True)),
                ('reach', models.IntegerField(blank=True, null=True)),
                ('engagement', models.IntegerField(blank=True, null=True)),
                ('engagement_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Engagement rate %', max_digits=5, null=True)),
                ('followers_gained', models.IntegerField(blank=True, null=True)),
                ('followers_lost', models.IntegerField(blank=True, null=True)),
                ('views', models.IntegerField(blank=True, null=True)),
                ('watch_time_minutes', models.IntegerField(blank=True, null=True)),
                ('shares', models.IntegerField(blank=True, null=True)),
                ('comments', models.IntegerField(blank=True, null=True)),
                ('likes', models.IntegerField(blank=True, null=True)),
                ('streams', models.IntegerField(blank=True, null=True)),
                ('downloads', models.IntegerField(blank=True, null=True)),
                ('playlist_adds', models.IntegerField(blank=True, null=True)),
                ('radio_plays', models.IntegerField(blank=True, null=True)),
                ('revenue', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('roi', models.DecimalField(blank=True, decimal_places=2, help_text='Return on investment %', max_digits=8, null=True)),
                ('custom_metrics', models.JSONField(blank=True, default=dict, help_text='Additional platform or service-specific metrics')),
                ('source', models.CharField(blank=True, help_text="Source of the metrics (e.g., 'facebook_ads', 'google_analytics')", max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics_history', to='campaigns.campaign')),
            ],
            options={
                'verbose_name': 'Campaign Metrics',
                'verbose_name_plural': 'Campaign Metrics',
                'ordering': ['-recorded_date'],
                'indexes': [models.Index(fields=['campaign', 'recorded_date'], name='crm_extensi_campaig_c9eec5_idx'), models.Index(fields=['recorded_date'], name='crm_extensi_recorde_819dcf_idx')],
                'unique_together': {('campaign', 'recorded_date', 'source')},
            },
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['status', 'priority', 'due_date'], name='crm_extensi_status_e70f1e_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['assigned_to', 'status'], name='crm_extensi_assigne_46c9c4_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['department', 'status'], name='crm_extensi_departm_8f56dd_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['campaign', 'status'], name='crm_extensi_campaig_5dcd3d_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['entity', 'status'], name='crm_extensi_entity__4a0158_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['due_date', 'status'], name='crm_extensi_due_dat_61db57_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['task_type', 'status'], name='crm_extensi_task_ty_1ebe9a_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['type', 'activity_date'], name='crm_extensi_type_9952f7_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['entity', 'activity_date'], name='crm_extensi_entity__2c440f_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['campaign', 'activity_date'], name='crm_extensi_campaig_fc94d9_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['contact_person', 'activity_date'], name='crm_extensi_contact_a34c5d_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['created_by', 'activity_date'], name='crm_extensi_created_936034_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['follow_up_date', 'follow_up_completed'], name='crm_extensi_follow__6493b9_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['department', 'activity_date'], name='crm_extensi_departm_0b73da_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['sentiment', 'activity_date'], name='crm_extensi_sentime_370dc5_idx'),
        ),
    ]
